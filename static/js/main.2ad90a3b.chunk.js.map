{"version":3,"sources":["components/Navbar/Navbar.js","components/PokemonCard/PokemonCard.js","components/FormPatchType/FormPatchType.js","components/Loading/Loading.js","components/TypeDetails/TypeDetails.js","components/PokemonDetails/PokemonDetails.js","components/FormAddPokemon/FormAddPokemon.js","components/FormAddType/FormAddType.js","components/FormPatchPokemon/FormPatchPokemon.js","components/App.js","reportWebVitals.js","index.js"],"names":["Navbar","showTypes","setShowTypes","to","id","src","alt","href","target","rel","size","onClick","uniqid","require","PokemonCard","pokemon","decideTypeColor","_id","style","textDecoration","undefined","img_url","name","type","map","className","FormPatchType","useState","setType","typeName","setTypeName","history","useHistory","useParams","isPending","setIsPending","useEffect","a","fetchType","typeFromServer","getType","fetch","response","json","data","onSubmit","e","preventDefault","method","headers","body","JSON","stringify","then","push","htmlFor","required","value","onChange","placeholder","disabled","Loading","TypeDetails","pokemonsByType","setPokemonsByType","showDeleteAlert","setShowDeleteAlert","pokemons","length","PokemonDetails","obj","setPokemon","psw","setPsw","showPsw","setShowPsw","fetchPokemon","getPokemon","description","height","weight","for","FormAddPokemon","fetchTypes","pokemonName","setPokemonName","setDescription","setHeight","setWeight","checkedTypes","setCheckedTypes","setImg_url","showAlert","setShowAlert","alertMessage","setAlertMessage","typesFromServer","setTypesFromServer","getTypes","handleCheckbox","currentTypes","includes","index","indexOf","splice","slice","console","log","res","newPokemon","FormAddType","FormPatchPokemon","password","isLoading","setIsLoading","pokeFromServer","App","types","setTypes","setPokemons","fetchPokemons","getPokemons","color","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ad90a3b.chunk.js","sourcesContent":["import './navbar.css'\r\nimport React from 'react'\r\nimport {AiFillGithub} from 'react-icons/ai'\r\nimport {ImCross} from 'react-icons/im'\r\nimport {GoThreeBars} from 'react-icons/go'\r\nimport {Link} from 'react-router-dom'\r\nimport {SiPokemon} from 'react-icons/si'\r\n\r\nfunction Navbar({showTypes, setShowTypes}) {\r\n    return (\r\n        <>\r\n        <nav>\r\n            <Link to = '/pokemon/create'> {/*ez majd react link lesz, sikeres submit után redirect! */}\r\n                <button id = \"add-pokemon-btn\">+ Pokemon</button>\r\n            </Link>\r\n            <Link to = '/'><img src = \"https://i.imgur.com/MHIviTb.png\" alt = \"pokemon\"/></Link>\r\n            <a href = 'https://github.com/minho-sama/Pokedex-React-Frontend' target = '_blank' rel=\"noreferrer\"><AiFillGithub id = \"git-icon\" size = \"40px\"/></a>\r\n            <button id = \"menu-button\" onClick = {() => setShowTypes(!showTypes)}>\r\n                {showTypes ?  <ImCross size = \"23px\"/>\r\n                             : <GoThreeBars size = \"23px\"/>}\r\n            </button>\r\n        </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport './PokemonCard.css'\r\nimport {Link} from 'react-router-dom'\r\nconst uniqid = require('uniqid');\r\n\r\nfunction PokemonCard({pokemon, decideTypeColor}) {\r\n    return (\r\n        <section>\r\n            <Link to = {`/pokemon/${pokemon._id}`} style={{ textDecoration: 'none' }}>\r\n                <img src = {pokemon.img_url === undefined ||\r\n                            pokemon.img_url == null ? \r\n                            \"https://i.imgur.com/IvobJfq.png\" : \r\n                            pokemon.img_url\r\n                        } \r\n                        // onError={`${pokemon.img_url}='https://i.imgur.com/IvobJfq.png`}\r\n                    alt = {pokemon.name}/>\r\n                <h1>{pokemon.name}</h1>\r\n            </Link>\r\n            <ul>\r\n            {\r\n                pokemon.type.map(type => {\r\n                    return (\r\n                        <li key = {uniqid()}\r\n                        className = {decideTypeColor(type.name)}>\r\n                        {type.name}\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PokemonCard\r\n","import React from 'react'\r\nimport {useState, useEffect} from 'react'\r\nimport {useHistory, useParams} from 'react-router-dom'\r\nimport './formPatchType.css'\r\nimport {CgPokemon} from 'react-icons/cg'\r\n\r\nfunction FormPatchType() {\r\n\r\n    const [type, setType] = useState({})\r\n    const [typeName, setTypeName] = useState(\"\")\r\n    const history = useHistory()\r\n    const {id} = useParams()\r\n    const [isPending, setIsPending] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const getType = async () => {\r\n            const typeFromServer = await fetchType()\r\n            setType(typeFromServer)\r\n            setTypeName(typeFromServer.type.name)\r\n        }\r\n        getType()\r\n    }, [])\r\n\r\n    const fetchType = async () => {\r\n        const response = await fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/type/${id}`)\r\n        const data = await response.json()\r\n        return data\r\n      }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const type = {name: typeName}\r\n        setIsPending(true)\r\n\r\n        fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/type/${id}/update`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': \"application/json\"},\r\n            body: JSON.stringify(type)\r\n        }).then(() => {\r\n            setIsPending(false)\r\n            history.push(`/type/${id}`)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form id = \"type-add-form\" onSubmit = {handleSubmit}>\r\n            <label htmlFor = \"name\">Type name: </label>\r\n            <input \r\n                required\r\n                value = {typeName}\r\n                onChange = {(e) => {\r\n                    e.preventDefault()\r\n                    setTypeName(e.target.value)\r\n                }}\r\n                type = 'text' id = \"name\" placeholder = \"e.g. Earth, Wind, Fire\"  name='name'>\r\n            </input>\r\n            {!isPending && <button> <CgPokemon/> Update Type</button> }\r\n            {isPending && <button disabled><CgPokemon/> Updating Type... </button> }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormPatchType","import './Loading.css'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className = \"loading\">\r\n            <img id = \"loading-img\" src = \"https://i.imgur.com/IvobJfq.png\" alt = \"pokeball\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport {useState, useEffect} from 'react'\r\nimport {useParams, useHistory} from 'react-router-dom'\r\nimport {Link} from 'react-router-dom'\r\nimport PokemonCard from '../PokemonCard/PokemonCard'\r\nimport '../App.css'\r\nimport './typeDetails.css'\r\n\r\nimport Loading from '../Loading/Loading'\r\n\r\nfunction TypeDetails({decideTypeColor}) {\r\n  const {id} = useParams()\r\n  const [type, setType] = useState({})\r\n  const [pokemonsByType, setPokemonsByType] = useState([])\r\n\r\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false)\r\n\r\n  const history = useHistory()\r\n \r\n  useEffect(() => {\r\n    const getType = async () => {\r\n      const typeFromServer = await fetchType(id)\r\n      setType(typeFromServer.type)\r\n      setPokemonsByType(typeFromServer.pokemons)\r\n    }\r\n    getType()\r\n  }, [id])\r\n\r\n  const fetchType = async (id) => {\r\n    const response = await fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/type/${id}`)\r\n    const data = await response.json()\r\n    return data\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    if(pokemonsByType.length > 0){\r\n      setShowDeleteAlert(true)\r\n      return \r\n    } else{\r\n      fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/type/${id}/delete`, {\r\n        method: 'DELETE'\r\n      }).then(() => {\r\n        history.push('/')\r\n      })\r\n    }\r\n  }\r\n\r\n    return (\r\n        <>\r\n        <h1><span className = {decideTypeColor(type.name)}>{type.name}</span> type Pokemons:</h1>\r\n        <div className = \"type-controllers\">\r\n          <Link to = {`/type/${id}/update`}>\r\n            <button>Update Type</button>\r\n          </Link>\r\n          <button onClick = {handleDelete}>Delete Type</button>\r\n        </div>\r\n        <article>\r\n          { pokemonsByType.length > 0 ? \r\n            pokemonsByType.map(pokemon => {\r\n              return (\r\n                <PokemonCard pokemon = {pokemon} decideTypeColor = {decideTypeColor} key = {pokemon._id}/>\r\n              )\r\n            })\r\n            : <Loading/>\r\n          }\r\n        </article>\r\n        {\r\n          showDeleteAlert && \r\n          <section id = \"delete-alert\">\r\n          <h1>Please delete these pokemons before you delete {type.name}: </h1>\r\n          <ul>\r\n            {\r\n              pokemonsByType.map(pokemon => {\r\n                return <Link to = {`/pokemon/${pokemon._id}`} style={{ textDecoration: 'none' }}><li key = {pokemon._id}>{pokemon.name}</li></Link>\r\n              })\r\n            }\r\n          </ul>\r\n          <button onClick = {() => setShowDeleteAlert(false)} >\r\n            close\r\n          </button>\r\n        </section>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TypeDetails\r\n","import React from 'react'\r\nimport {useParams, useHistory, Link} from 'react-router-dom'\r\nimport {useState, useEffect} from 'react'\r\nimport Loading from '../Loading/Loading'\r\nimport './PokemonDetails.css' \r\nconst uniqid = require('uniqid');\r\n\r\nfunction PokemonDetails({decideTypeColor}) {\r\n    const {id} = useParams()\r\n    const [pokemon, setPokemon] = useState({})\r\n    const history = useHistory()\r\n    const [psw, setPsw] = useState(\"\")\r\n    const [showPsw, setShowPsw] = useState(false)\r\n    const password = \"plsdontdeletety00\"\r\n\r\n    useEffect(() => {\r\n        const getPokemon = async () => {\r\n            const pokemon = await fetchPokemon()\r\n            setPokemon(pokemon)\r\n        }\r\n        getPokemon()\r\n    }, [])\r\n\r\n    function isEmptyObject(obj){\r\n        return JSON.stringify(obj) === '{}';\r\n    }\r\n\r\n    async function fetchPokemon (){\r\n        const response = await fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/pokemon/${id}`)\r\n        const data = await response.json()\r\n        return data \r\n    }\r\n\r\n    const handleDelete = () => {\r\n        fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/pokemon/${id}/delete`, {\r\n            method: 'DELETE'\r\n        }).then(() => {\r\n            history.push('/')\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className = \"pokemon-details-page\">\r\n          {\r\n            isEmptyObject(pokemon) ? <Loading/> :\r\n            <>\r\n            <h1 id = \"mobile-name\">{pokemon.name}</h1>\r\n            <img src = {pokemon.img_url === undefined ||\r\n                        pokemon.img_url === null ? \r\n                            \"https://i.imgur.com/IvobJfq.png\" : \r\n                            pokemon.img_url\r\n                        } \r\n                    alt = {pokemon.name}/>\r\n            <div className = 'container'>\r\n                <h1 id = \"name\">{pokemon.name}</h1>\r\n                <figcaption>\r\n                    { pokemon.description === undefined ||\r\n                      pokemon.description === null ? `No description avalaible for ${pokemon.name}`:\r\n                      pokemon.description\r\n                    }\r\n                </figcaption>\r\n                <ul className = \"data-grid\">\r\n                    <li><span>Height: </span> {pokemon.height === undefined || pokemon.height === null ? 'N.A.' : pokemon.height} <span> cm</span></li>\r\n                    <li><span>Weight: </span> {pokemon.weight === undefined || pokemon.weight === null ? 'N.A.' : pokemon.weight} <span> kg</span></li>\r\n                </ul>\r\n                <ul className = \"type-grid\">\r\n                {pokemon.type && pokemon.type.map(type => {\r\n                    return (\r\n                        <li key = {uniqid()}\r\n                        className = {decideTypeColor(type.name)}>\r\n                        {type.name}\r\n                        </li>\r\n                    )\r\n                })}\r\n                </ul>\r\n                <section className = 'control-btns'>\r\n                    <Link to = {`/pokemon/${id}/update`}>\r\n                        <button>Update Info</button>\r\n                    </Link>\r\n                    {  \r\n                        psw === password ? \r\n                        <button onClick = {handleDelete}>\r\n                            Delete Pokemon\r\n                        </button> : \r\n                        <button id = \"disabled\" onClick = {() => setShowPsw(true)}>\r\n                            Delete Pokemon\r\n                        </button>\r\n                    }\r\n                </section>\r\n                {\r\n                    showPsw && <div id = \"psw-container\">\r\n                    <label for = \"psw\">Password for Deleteing Pokemon</label>\r\n                    <input type = \"password\" id = \"psw\" value = {psw} onChange = {(e) => setPsw(e.target.value)}></input>\r\n                </div>\r\n                }\r\n            </div>\r\n            </>\r\n          }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonDetails\r\n","import React from 'react'\r\nimport {useState, useEffect} from 'react'\r\nimport './formAddPokemon.css' \r\nimport {useHistory} from 'react-router-dom' \r\n \r\nfunction FormAddPokemon({fetchTypes, decideTypeColor}) {\r\n    const [pokemonName, setPokemonName] = useState(\"\")\r\n    const [description, setDescription] = useState(undefined) //ezzel csináláni vmit, remove obj properties if .trim().length === 0\r\n                                                    //conditional rendering direktben a pokemon objectben?\r\n    const [height, setHeight] = useState(undefined)\r\n    const [weight, setWeight] = useState(undefined) \r\n    const [checkedTypes, setCheckedTypes] = useState([])\r\n    const [img_url, setImg_url] = useState(undefined)\r\n\r\n    const [showAlert, setShowAlert] = useState(false)\r\n    const [alertMessage, setAlertMessage] = useState(\"\")\r\n    const [isPending, setIsPending] = useState(false)\r\n    const [typesFromServer, setTypesFromServer] = useState([])\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const getTypes = async () => {\r\n            const data = await fetchTypes()\r\n            setTypesFromServer(data)\r\n        }\r\n        getTypes()\r\n    }, [])\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if(checkedTypes.length <1){\r\n            setShowAlert(true)\r\n            setAlertMessage('Pokémon must have at least 1 type')\r\n            return\r\n        } else{\r\n            const pokemon = {\r\n                name: pokemonName,\r\n                description: description,\r\n                height: height,\r\n                weight: weight,\r\n                type: checkedTypes.slice(0,2),\r\n                img_url: img_url\r\n            }\r\n            console.log(pokemon)\r\n            // Object.keys(pokemon).forEach((k) => pokemon[k] == undefined && delete pokemon[k]);\r\n            setIsPending(true)\r\n            fetch('https://pokedex-api-minho.herokuapp.com/pokedex/pokemon/create', {\r\n                method: 'POST',\r\n                headers: {'Content-Type': \"application/json\"},\r\n                body: JSON.stringify(pokemon)\r\n            }).then((res) => {\r\n                return res.json()\r\n            }).then((newPokemon) => {\r\n                console.log(newPokemon)\r\n                history.push(`/pokemon/${newPokemon._id}`)\r\n                setIsPending(false)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n        let currentTypes = checkedTypes\r\n        if(currentTypes.includes(e.target.value)){\r\n            let index = currentTypes.indexOf(e.target.value)\r\n            currentTypes.splice(index, 1)\r\n        } \r\n        else if(currentTypes.length === 2){\r\n            setShowAlert(true)\r\n            setAlertMessage(\"Pokemon must have a maximum of 2 types\")\r\n            currentTypes.push(e.target.value)\r\n        } else{\r\n            currentTypes.push(e.target.value)\r\n        }\r\n        setCheckedTypes(currentTypes)\r\n    }\r\n\r\n    return (\r\n        <form id = \"pokemon-add-form\" onSubmit = {handleSubmit}>\r\n            <div className = \"flex-wrapper\">\r\n                <label htmlFor = \"name\">Pokemon's Name:</label>\r\n                <input required value = {pokemonName}\r\n                    onChange = {(e) => {setPokemonName(e.target.value)}}\r\n                    type = 'text' id = \"name\" placeholder = \"e.g. Godzilla, King Kong, Doge\"  name='name'>\r\n                </input>\r\n\r\n                <label htmlFor = \"description\">Pokemon's Description:</label>\r\n                <input value = {description}\r\n                    onChange = {(e) => {setDescription(e.target.value)}}\r\n                    type = 'textarea' id = \"description\" placeholder = \"optional\"  name='description'>\r\n                </input>\r\n \r\n                <label htmlFor = \"height\">Pokemon's height (cm):</label>\r\n                <input value = {height}\r\n                    onChange = {(e) => {setHeight(e.target.value)}}\r\n                    type = 'number' id = \"height\"  name='height'>\r\n                </input>\r\n\r\n                <label htmlFor = \"weight\">Pokemon's weight (kg):</label>\r\n                <input value = {weight}\r\n                    onChange = {(e) => {setWeight(e.target.value)}}\r\n                    type = 'number' id = \"name\"  name='weight'>\r\n                </input>\r\n            </div>\r\n            <div className = 'flex-wrapper'>\r\n                {showAlert && <p id = \"type-alert-msg\">{alertMessage}</p>}\r\n                <fieldset>\r\n                    <legend>Choose Types</legend>\r\n                    {\r\n                        typesFromServer.map(type => {\r\n                            return (\r\n                                <div key = {type._id}>\r\n                                    <input type = \"checkbox\" \r\n                                        id = {decideTypeColor(type.name)}\r\n                                        value = {type._id}\r\n                                        onChange={handleCheckbox}>\r\n                                    </input>\r\n                                    <label htmlFor = {decideTypeColor(type.name)}\r\n                                        className = {decideTypeColor(type.name)}\r\n                                        >{type.name}\r\n                                    </label> \r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </fieldset>\r\n\r\n                <label htmlFor = \"img_url\">Pokemon's image URL:</label>\r\n                <input value = {img_url}\r\n                    onChange = {(e) => {setImg_url(e.target.value)}}\r\n                    type = 'text' id = \"img_url\" placeholder = \"optional\"  name='img_url'>\r\n                </input>\r\n                {!isPending && <button>Add Pokemon</button>}\r\n                {isPending && <button disabled>Adding Pokemon...</button>}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormAddPokemon\r\n","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport './formAddType.css'\r\nimport {CgPokemon} from 'react-icons/cg'\r\nfunction FormAddType() {\r\n\r\n    const [typeName, setTypeName] = useState(\"\")\r\n    const [isPending, setIsPending] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        setIsPending(true)\r\n        const type = {name: typeName}\r\n\r\n        fetch('https://pokedex-api-minho.herokuapp.com/pokedex/type/create', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': \"application/json\"},\r\n            body: JSON.stringify(type)\r\n        }).then(() => {\r\n            setIsPending(false)\r\n            history.push('/')\r\n        })\r\n    }\r\n\r\n    return (\r\n        <form id = \"type-add-form\" onSubmit = {handleSubmit}>\r\n            <label htmlFor = \"name\">Type name: </label>\r\n            <input \r\n                required\r\n                value = {typeName}\r\n                onChange = {(e) => {\r\n                    e.preventDefault()\r\n                    setTypeName(e.target.value)\r\n                }}\r\n                type = 'text' id = \"name\" placeholder = \"e.g. Earth, Wind, Fire\"  name='name'>\r\n            </input>\r\n            {!isPending && <button type = \"submit\"> <CgPokemon/> Add Type</button> }\r\n            {isPending && <button type = \"submit\" disabled><CgPokemon/> Adding Type... </button> }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormAddType\r\n","import '../FormAddPokemon/formAddPokemon.css'\r\nimport './formPatchPokemon.css'\r\nimport React from 'react'\r\nimport {useState, useEffect} from 'react'\r\nimport {useHistory, useParams} from 'react-router-dom'\r\nimport Loading from '../Loading/Loading'\r\n\r\nfunction FormPatchPokemon({fetchTypes, decideTypeColor}) {\r\n    const [pokemonName, setPokemonName] = useState(\"\")\r\n    const [description, setDescription] = useState(undefined)\r\n    const [height, setHeight] = useState(undefined)\r\n    const [weight, setWeight] = useState(undefined)\r\n    const [checkedTypes, setCheckedTypes] = useState([])\r\n    const [img_url, setImg_url] = useState(undefined)\r\n\r\n    const [showAlert, setShowAlert] = useState(false)\r\n    const [alertMessage, setAlertMessage] = useState(\"\")\r\n    const [isPending, setIsPending] = useState(false)\r\n    const [typesFromServer, setTypesFromServer] = useState([])\r\n    const [pokemon, setPokemon] = useState({})\r\n    const history = useHistory()\r\n    const {id} = useParams() \r\n\r\n    const [psw, setPsw] = useState(\"\")\r\n    const [showPsw, setShowPsw] = useState(false)\r\n    const password = \"plsdontupdatety00\"\r\n \r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const getTypes = async () => {\r\n            const data = await fetchTypes()\r\n            setTypesFromServer(data)\r\n        }\r\n        getTypes()\r\n\r\n        const getPokemon = async () => {\r\n            const pokeFromServer = await fetchPokemon()\r\n            setPokemon(pokeFromServer)\r\n        } \r\n        getPokemon().then(() => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setPokemonName(pokemon.name)\r\n        setDescription(pokemon.description)\r\n        setWeight(pokemon.weight) \r\n        setHeight(pokemon.height)\r\n        setImg_url(pokemon.img_url)\r\n        // setCheckedTypes(pokemon.type)\r\n    }, [pokemon])\r\n\r\n    const fetchPokemon = async () => {\r\n        const response = await fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/pokemon/${id}`)\r\n        const data = await response.json()\r\n        return data\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(checkedTypes.length <1){\r\n            setShowAlert(true)\r\n            setAlertMessage('Pokémon must have at least 1 type')\r\n            return\r\n        }\r\n        else if(psw !== password){\r\n            return\r\n        }\r\n        const pokemon = { \r\n            name: pokemonName,\r\n            description: description,\r\n            height: height,\r\n            weight: weight,\r\n            type: checkedTypes.slice(0,2),\r\n            img_url: img_url\r\n        }\r\n        console.log(pokemon)\r\n        // Object.keys(pokemon).forEach((k) => pokemon[k] == undefined && delete pokemon[k]);\r\n        setIsPending(true)\r\n        fetch(`https://pokedex-api-minho.herokuapp.com/pokedex/pokemon/${id}/update`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': \"application/json\"},\r\n            body: JSON.stringify(pokemon)\r\n        }).then((res) => {\r\n            return res.json()\r\n        }).then((newPokemon) => {\r\n            console.log(newPokemon)\r\n            history.push(`/pokemon/${id}`)\r\n            setIsPending(false) \r\n        })\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n        let currentTypes = checkedTypes\r\n        if(currentTypes.includes(e.target.value)){\r\n            let index = currentTypes.indexOf(e.target.value)\r\n            currentTypes.splice(index, 1)\r\n        } \r\n        else if(currentTypes.length === 2){\r\n            setShowAlert(true)\r\n            setAlertMessage(\"Pokemon must have a maximum of 2 types\")\r\n            currentTypes.push(e.target.value)\r\n        } else{\r\n            currentTypes.push(e.target.value)\r\n        }\r\n        setCheckedTypes(currentTypes)\r\n    }\r\n    if(isLoading){\r\n        return <Loading/>\r\n    } else{\r\n\r\n        return (\r\n            <form id = \"pokemon-add-form\"  onSubmit = {handleSubmit}>\r\n                <div className = \"flex-wrapper\">\r\n                    <label htmlFor = \"name\">Pokemon's Name:</label>\r\n                    <input required value = {pokemonName}\r\n                        onChange = {(e) => {setPokemonName(e.target.value)}}\r\n                        type = 'text' id = \"name\" placeholder = \"e.g. Godzilla, King Kong, Doge\"  name='name'>\r\n                    </input>\r\n    \r\n                    <label htmlFor = \"description\">Pokemon's Description:</label>\r\n                    <input value = {description}\r\n                        onChange = {(e) => {setDescription(e.target.value)}}\r\n                        type = 'textarea' id = \"description\" placeholder = \"optional\"  name='description'>\r\n                    </input>\r\n    \r\n                    <label htmlFor = \"height\">Pokemon's height (cm):</label>\r\n                    <input value = {height}\r\n                        onChange = {(e) => {setHeight(e.target.value)}}\r\n                        type = 'number' id = \"height\"  name='height'>\r\n                    </input>\r\n    \r\n                    <label htmlFor = \"weight\">Pokemon's weight (kg):</label>\r\n                    <input value = {weight}\r\n                        onChange = {(e) => {setWeight(e.target.value)}}\r\n                        type = 'number' id = \"name\"  name='weight'>\r\n                    </input>\r\n                </div>\r\n                <div className = 'flex-wrapper'>\r\n                    {showAlert && <p id = \"type-alert-msg\">{alertMessage}</p>}\r\n                    <fieldset>\r\n                        <legend>Choose Types</legend>\r\n                        {\r\n                            typesFromServer.map(type => {\r\n                                return (\r\n                                    <div key = {type._id}>\r\n                                        <input type = \"checkbox\" \r\n                                            //caused too much bug\r\n                                            // checked = {\r\n                                            //     pokemon.type && pokemon.type.map(checkedType => checkedType._id).includes(type._id)\r\n                                            //     && \"checked\"}\r\n                                            id = {decideTypeColor(type.name)}\r\n                                            value = {type._id}\r\n                                            onChange={handleCheckbox}>\r\n                                        </input>\r\n                                        <label htmlFor = {decideTypeColor(type.name)}\r\n                                            className = {decideTypeColor(type.name)}\r\n                                            >{type.name}\r\n                                        </label> \r\n                                    </div>\r\n                                )\r\n                            })\r\n                        } \r\n                    </fieldset>\r\n    \r\n                    <label htmlFor = \"img_url\">Pokemon's image URL:</label>\r\n                    <input value = {img_url}\r\n                        onChange = {(e) => {setImg_url(e.target.value)}}\r\n                        type = 'text' id = \"img_url\" placeholder = \"optional\"  name='img_url'>\r\n                    </input>\r\n                    {/* {!isPending && <button>Update Pokemon</button>}\r\n                    {isPending && <button disabled>Updating Pokemon...</button>} */}\r\n                    {  \r\n                        psw === password ? \r\n                        <button>\r\n                            Update Pokemon\r\n                        </button> : \r\n                        <button onClick = {() => setShowPsw(true)}>\r\n                            Update Pokemon\r\n                        </button>\r\n                    }\r\n                    {\r\n                        showPsw && <div id = \"psw-container-update\">\r\n                            <label for = \"psw\">Password for Updating Pokemon</label>\r\n                            <input type = \"password\" id = \"psw\" value = {psw} onChange = {(e) => setPsw(e.target.value)}></input>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </form>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default FormPatchPokemon","import './App.css';\nimport {useState, useEffect} from 'react'\nimport Navbar from './Navbar/Navbar'\nimport PokemonCard from './PokemonCard/PokemonCard'\nimport FormPatchType from './FormPatchType/FormPatchType';\nimport TypeDetails from './TypeDetails/TypeDetails'\nimport PokemonDetails from './PokemonDetails/PokemonDetails'\nimport Loading from './Loading/Loading'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport {Link} from 'react-router-dom'\nimport FormAddPokemon from './FormAddPokemon/FormAddPokemon'\nimport FormAddType from './FormAddType/FormAddType'\nimport FormPatchPokemon from './FormPatchPokemon/FormPatchPokemon';\n\nfunction App() {\n  const [types, setTypes] = useState([])\n  const [showTypes, setShowTypes] = useState(true)\n  const [pokemons, setPokemons] = useState([])\n\n  useEffect(() => {\n      const getTypes = async () => {\n          const types = await fetchTypes()\n          setTypes(types)\n      }\n      getTypes()\n\n      const getPokemons = async () => {\n        const pokemons = await fetchPokemons()\n        setPokemons(pokemons)\n      }\n      getPokemons()\n  }, [types])\n\n  const fetchTypes = async ()=>{\n      const res = await fetch('https://pokedex-api-minho.herokuapp.com/pokedex/types')\n      const data = await res.json()\n      return data\n  } \n\n  const fetchPokemons = async () => {\n    const res = await fetch('https://pokedex-api-minho.herokuapp.com/pokedex/pokemons')\n    const data = await res.json()\n    return data\n  }\n\n  //as we can update the type name, it is smarter to use the id, or type data could include the color in rgb\n  function decideTypeColor (name){\n    switch (name){\n      case 'fire':\n        return 'fire-type'\n      case 'water':\n        return 'water-type'\n      case 'grass':\n        return 'grass-type'\n      case 'poison':\n        return \"poison-type\"\n      case 'flying':\n        return 'flying-type'\n      case 'electric':\n        return 'electric-type'\n      case 'bug':\n        return 'bug-type'\n      case 'normal':\n        return 'normal-type'\n      case 'ground':\n        return 'ground-type'\n      case 'fairy':\n        return 'fairy-type'\n      case 'fighting':\n        return 'fighting-type'\n      case 'dragon':\n        return 'dragon-type'\n      case 'ghost':\n        return 'ghost-type'\n      case 'rock':\n        return 'rock-type'\n      case 'ice':\n        return 'ice-type'\n      case 'psychic':\n        return 'psychic-type'\n      default:\n        return 'default-color'\n    }\n  }\n\n  return (\n    <>\n    <Router>\n      <Navbar showTypes = {showTypes} setShowTypes = {setShowTypes}/>\n      <ul id = \"type-container\">\n          {\n            showTypes && types.map(type => {\n                return <Link to = {`/type/${type._id}`} style={{ textDecoration: 'none', color:'black'}} key = {type._id}>\n                        <li className = {decideTypeColor(type.name)}\n                          key = {type._id}>\n                          {type.name}\n                          </li>\n                      </Link>\n            })\n          }\n          {showTypes && <Link to = '/type/create' > {/*sikeres submit után redirect! */}\n              <button id = \"add-type-btn\">+ Add Type</button> \n          </Link>}\n        </ul>\n        <article>\n          <Switch>\n            <Route exact path = '/'>\n              {pokemons.length > 0 ? \n                pokemons.map(pokemon => {\n                  return <PokemonCard key = {pokemon._id} pokemon = {pokemon} decideTypeColor = {decideTypeColor} />\n                }) :\n                <Loading/>}\n            </Route>\n            <Route exact path = \"/type/create\">\n              <FormAddType/>\n            </Route>\n            <Route exact path = '/type/:id/update'>\n                <FormPatchType />\n            </Route>\n            <Route exact path = '/type/:id'>\n                <TypeDetails decideTypeColor = {decideTypeColor}/>\n            </Route>\n            <Route exact path = \"/pokemon/create\">\n              <FormAddPokemon decideTypeColor = {decideTypeColor} fetchTypes = {fetchTypes}/>\n            </Route>\n            <Route exact path = '/pokemon/:id/update'>\n                <FormPatchPokemon decideTypeColor = {decideTypeColor} fetchTypes = {fetchTypes}/>\n            </Route>\n            <Route exact path = '/pokemon/:id'>\n              <PokemonDetails  decideTypeColor = {decideTypeColor}/>\n            </Route>\n          </Switch>\n        </article>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}